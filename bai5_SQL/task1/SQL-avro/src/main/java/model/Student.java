/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Student extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Student\",\"namespace\":\"model\",\"fields\":[{\"name\":\"idStuden\",\"type\":\"int\"},{\"name\":\"SlSubject\",\"type\":\"int\"},{\"name\":\"ListSubject\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NameGroupStudent\",\"fields\":[{\"name\":\"class_registration\",\"type\":\"int\"},{\"name\":\"Group\",\"type\":\"int\"},{\"name\":\"score\",\"type\":\"float\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int idStuden;
  @Deprecated public int SlSubject;
  @Deprecated public java.util.List<model.NameGroupStudent> ListSubject;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Student() {}

  /**
   * All-args constructor.
   */
  public Student(java.lang.Integer idStuden, java.lang.Integer SlSubject, java.util.List<model.NameGroupStudent> ListSubject) {
    this.idStuden = idStuden;
    this.SlSubject = SlSubject;
    this.ListSubject = ListSubject;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return idStuden;
    case 1: return SlSubject;
    case 2: return ListSubject;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: idStuden = (java.lang.Integer)value$; break;
    case 1: SlSubject = (java.lang.Integer)value$; break;
    case 2: ListSubject = (java.util.List<model.NameGroupStudent>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'idStuden' field.
   */
  public java.lang.Integer getIdStuden() {
    return idStuden;
  }

  /**
   * Sets the value of the 'idStuden' field.
   * @param value the value to set.
   */
  public void setIdStuden(java.lang.Integer value) {
    this.idStuden = value;
  }

  /**
   * Gets the value of the 'SlSubject' field.
   */
  public java.lang.Integer getSlSubject() {
    return SlSubject;
  }

  /**
   * Sets the value of the 'SlSubject' field.
   * @param value the value to set.
   */
  public void setSlSubject(java.lang.Integer value) {
    this.SlSubject = value;
  }

  /**
   * Gets the value of the 'ListSubject' field.
   */
  public java.util.List<model.NameGroupStudent> getListSubject() {
    return ListSubject;
  }

  /**
   * Sets the value of the 'ListSubject' field.
   * @param value the value to set.
   */
  public void setListSubject(java.util.List<model.NameGroupStudent> value) {
    this.ListSubject = value;
  }

  /** Creates a new Student RecordBuilder */
  public static model.Student.Builder newBuilder() {
    return new model.Student.Builder();
  }
  
  /** Creates a new Student RecordBuilder by copying an existing Builder */
  public static model.Student.Builder newBuilder(model.Student.Builder other) {
    return new model.Student.Builder(other);
  }
  
  /** Creates a new Student RecordBuilder by copying an existing Student instance */
  public static model.Student.Builder newBuilder(model.Student other) {
    return new model.Student.Builder(other);
  }
  
  /**
   * RecordBuilder for Student instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Student>
    implements org.apache.avro.data.RecordBuilder<Student> {

    private int idStuden;
    private int SlSubject;
    private java.util.List<model.NameGroupStudent> ListSubject;

    /** Creates a new Builder */
    private Builder() {
      super(model.Student.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(model.Student.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.idStuden)) {
        this.idStuden = data().deepCopy(fields()[0].schema(), other.idStuden);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SlSubject)) {
        this.SlSubject = data().deepCopy(fields()[1].schema(), other.SlSubject);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ListSubject)) {
        this.ListSubject = data().deepCopy(fields()[2].schema(), other.ListSubject);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Student instance */
    private Builder(model.Student other) {
            super(model.Student.SCHEMA$);
      if (isValidValue(fields()[0], other.idStuden)) {
        this.idStuden = data().deepCopy(fields()[0].schema(), other.idStuden);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SlSubject)) {
        this.SlSubject = data().deepCopy(fields()[1].schema(), other.SlSubject);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ListSubject)) {
        this.ListSubject = data().deepCopy(fields()[2].schema(), other.ListSubject);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'idStuden' field */
    public java.lang.Integer getIdStuden() {
      return idStuden;
    }
    
    /** Sets the value of the 'idStuden' field */
    public model.Student.Builder setIdStuden(int value) {
      validate(fields()[0], value);
      this.idStuden = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'idStuden' field has been set */
    public boolean hasIdStuden() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'idStuden' field */
    public model.Student.Builder clearIdStuden() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'SlSubject' field */
    public java.lang.Integer getSlSubject() {
      return SlSubject;
    }
    
    /** Sets the value of the 'SlSubject' field */
    public model.Student.Builder setSlSubject(int value) {
      validate(fields()[1], value);
      this.SlSubject = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'SlSubject' field has been set */
    public boolean hasSlSubject() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'SlSubject' field */
    public model.Student.Builder clearSlSubject() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'ListSubject' field */
    public java.util.List<model.NameGroupStudent> getListSubject() {
      return ListSubject;
    }
    
    /** Sets the value of the 'ListSubject' field */
    public model.Student.Builder setListSubject(java.util.List<model.NameGroupStudent> value) {
      validate(fields()[2], value);
      this.ListSubject = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'ListSubject' field has been set */
    public boolean hasListSubject() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'ListSubject' field */
    public model.Student.Builder clearListSubject() {
      ListSubject = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Student build() {
      try {
        Student record = new Student();
        record.idStuden = fieldSetFlags()[0] ? this.idStuden : (java.lang.Integer) defaultValue(fields()[0]);
        record.SlSubject = fieldSetFlags()[1] ? this.SlSubject : (java.lang.Integer) defaultValue(fields()[1]);
        record.ListSubject = fieldSetFlags()[2] ? this.ListSubject : (java.util.List<model.NameGroupStudent>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
