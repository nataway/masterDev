/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Subjects extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Subjects\",\"namespace\":\"model\",\"fields\":[{\"name\":\"teacher\",\"type\":\"int\"},{\"name\":\"soluongGroup\",\"type\":\"int\"},{\"name\":\"SlStudent\",\"type\":\"int\"},{\"name\":\"Subject\",\"type\":\"int\"},{\"name\":\"ListNameGroup\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NameGroup\",\"fields\":[{\"name\":\"group\",\"type\":\"int\"},{\"name\":\"SlStudenr\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int teacher;
  @Deprecated public int soluongGroup;
  @Deprecated public int SlStudent;
  @Deprecated public int Subject;
  @Deprecated public java.util.List<model.NameGroup> ListNameGroup;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Subjects() {}

  /**
   * All-args constructor.
   */
  public Subjects(java.lang.Integer teacher, java.lang.Integer soluongGroup, java.lang.Integer SlStudent, java.lang.Integer Subject, java.util.List<model.NameGroup> ListNameGroup) {
    this.teacher = teacher;
    this.soluongGroup = soluongGroup;
    this.SlStudent = SlStudent;
    this.Subject = Subject;
    this.ListNameGroup = ListNameGroup;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return teacher;
    case 1: return soluongGroup;
    case 2: return SlStudent;
    case 3: return Subject;
    case 4: return ListNameGroup;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: teacher = (java.lang.Integer)value$; break;
    case 1: soluongGroup = (java.lang.Integer)value$; break;
    case 2: SlStudent = (java.lang.Integer)value$; break;
    case 3: Subject = (java.lang.Integer)value$; break;
    case 4: ListNameGroup = (java.util.List<model.NameGroup>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'teacher' field.
   */
  public java.lang.Integer getTeacher() {
    return teacher;
  }

  /**
   * Sets the value of the 'teacher' field.
   * @param value the value to set.
   */
  public void setTeacher(java.lang.Integer value) {
    this.teacher = value;
  }

  /**
   * Gets the value of the 'soluongGroup' field.
   */
  public java.lang.Integer getSoluongGroup() {
    return soluongGroup;
  }

  /**
   * Sets the value of the 'soluongGroup' field.
   * @param value the value to set.
   */
  public void setSoluongGroup(java.lang.Integer value) {
    this.soluongGroup = value;
  }

  /**
   * Gets the value of the 'SlStudent' field.
   */
  public java.lang.Integer getSlStudent() {
    return SlStudent;
  }

  /**
   * Sets the value of the 'SlStudent' field.
   * @param value the value to set.
   */
  public void setSlStudent(java.lang.Integer value) {
    this.SlStudent = value;
  }

  /**
   * Gets the value of the 'Subject' field.
   */
  public java.lang.Integer getSubject() {
    return Subject;
  }

  /**
   * Sets the value of the 'Subject' field.
   * @param value the value to set.
   */
  public void setSubject(java.lang.Integer value) {
    this.Subject = value;
  }

  /**
   * Gets the value of the 'ListNameGroup' field.
   */
  public java.util.List<model.NameGroup> getListNameGroup() {
    return ListNameGroup;
  }

  /**
   * Sets the value of the 'ListNameGroup' field.
   * @param value the value to set.
   */
  public void setListNameGroup(java.util.List<model.NameGroup> value) {
    this.ListNameGroup = value;
  }

  /** Creates a new Subjects RecordBuilder */
  public static model.Subjects.Builder newBuilder() {
    return new model.Subjects.Builder();
  }
  
  /** Creates a new Subjects RecordBuilder by copying an existing Builder */
  public static model.Subjects.Builder newBuilder(model.Subjects.Builder other) {
    return new model.Subjects.Builder(other);
  }
  
  /** Creates a new Subjects RecordBuilder by copying an existing Subjects instance */
  public static model.Subjects.Builder newBuilder(model.Subjects other) {
    return new model.Subjects.Builder(other);
  }
  
  /**
   * RecordBuilder for Subjects instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Subjects>
    implements org.apache.avro.data.RecordBuilder<Subjects> {

    private int teacher;
    private int soluongGroup;
    private int SlStudent;
    private int Subject;
    private java.util.List<model.NameGroup> ListNameGroup;

    /** Creates a new Builder */
    private Builder() {
      super(model.Subjects.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(model.Subjects.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.teacher)) {
        this.teacher = data().deepCopy(fields()[0].schema(), other.teacher);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.soluongGroup)) {
        this.soluongGroup = data().deepCopy(fields()[1].schema(), other.soluongGroup);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.SlStudent)) {
        this.SlStudent = data().deepCopy(fields()[2].schema(), other.SlStudent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Subject)) {
        this.Subject = data().deepCopy(fields()[3].schema(), other.Subject);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ListNameGroup)) {
        this.ListNameGroup = data().deepCopy(fields()[4].schema(), other.ListNameGroup);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Subjects instance */
    private Builder(model.Subjects other) {
            super(model.Subjects.SCHEMA$);
      if (isValidValue(fields()[0], other.teacher)) {
        this.teacher = data().deepCopy(fields()[0].schema(), other.teacher);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.soluongGroup)) {
        this.soluongGroup = data().deepCopy(fields()[1].schema(), other.soluongGroup);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.SlStudent)) {
        this.SlStudent = data().deepCopy(fields()[2].schema(), other.SlStudent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Subject)) {
        this.Subject = data().deepCopy(fields()[3].schema(), other.Subject);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ListNameGroup)) {
        this.ListNameGroup = data().deepCopy(fields()[4].schema(), other.ListNameGroup);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'teacher' field */
    public java.lang.Integer getTeacher() {
      return teacher;
    }
    
    /** Sets the value of the 'teacher' field */
    public model.Subjects.Builder setTeacher(int value) {
      validate(fields()[0], value);
      this.teacher = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'teacher' field has been set */
    public boolean hasTeacher() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'teacher' field */
    public model.Subjects.Builder clearTeacher() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'soluongGroup' field */
    public java.lang.Integer getSoluongGroup() {
      return soluongGroup;
    }
    
    /** Sets the value of the 'soluongGroup' field */
    public model.Subjects.Builder setSoluongGroup(int value) {
      validate(fields()[1], value);
      this.soluongGroup = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'soluongGroup' field has been set */
    public boolean hasSoluongGroup() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'soluongGroup' field */
    public model.Subjects.Builder clearSoluongGroup() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'SlStudent' field */
    public java.lang.Integer getSlStudent() {
      return SlStudent;
    }
    
    /** Sets the value of the 'SlStudent' field */
    public model.Subjects.Builder setSlStudent(int value) {
      validate(fields()[2], value);
      this.SlStudent = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'SlStudent' field has been set */
    public boolean hasSlStudent() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'SlStudent' field */
    public model.Subjects.Builder clearSlStudent() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'Subject' field */
    public java.lang.Integer getSubject() {
      return Subject;
    }
    
    /** Sets the value of the 'Subject' field */
    public model.Subjects.Builder setSubject(int value) {
      validate(fields()[3], value);
      this.Subject = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'Subject' field has been set */
    public boolean hasSubject() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'Subject' field */
    public model.Subjects.Builder clearSubject() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'ListNameGroup' field */
    public java.util.List<model.NameGroup> getListNameGroup() {
      return ListNameGroup;
    }
    
    /** Sets the value of the 'ListNameGroup' field */
    public model.Subjects.Builder setListNameGroup(java.util.List<model.NameGroup> value) {
      validate(fields()[4], value);
      this.ListNameGroup = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'ListNameGroup' field has been set */
    public boolean hasListNameGroup() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'ListNameGroup' field */
    public model.Subjects.Builder clearListNameGroup() {
      ListNameGroup = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Subjects build() {
      try {
        Subjects record = new Subjects();
        record.teacher = fieldSetFlags()[0] ? this.teacher : (java.lang.Integer) defaultValue(fields()[0]);
        record.soluongGroup = fieldSetFlags()[1] ? this.soluongGroup : (java.lang.Integer) defaultValue(fields()[1]);
        record.SlStudent = fieldSetFlags()[2] ? this.SlStudent : (java.lang.Integer) defaultValue(fields()[2]);
        record.Subject = fieldSetFlags()[3] ? this.Subject : (java.lang.Integer) defaultValue(fields()[3]);
        record.ListNameGroup = fieldSetFlags()[4] ? this.ListNameGroup : (java.util.List<model.NameGroup>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
