/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NameGroupStudent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NameGroupStudent\",\"namespace\":\"model\",\"fields\":[{\"name\":\"class_registration\",\"type\":\"int\"},{\"name\":\"Group\",\"type\":\"int\"},{\"name\":\"score\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int class_registration;
  @Deprecated public int Group;
  @Deprecated public float score;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public NameGroupStudent() {}

  /**
   * All-args constructor.
   */
  public NameGroupStudent(java.lang.Integer class_registration, java.lang.Integer Group, java.lang.Float score) {
    this.class_registration = class_registration;
    this.Group = Group;
    this.score = score;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return class_registration;
    case 1: return Group;
    case 2: return score;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: class_registration = (java.lang.Integer)value$; break;
    case 1: Group = (java.lang.Integer)value$; break;
    case 2: score = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'class_registration' field.
   */
  public java.lang.Integer getClassRegistration() {
    return class_registration;
  }

  /**
   * Sets the value of the 'class_registration' field.
   * @param value the value to set.
   */
  public void setClassRegistration(java.lang.Integer value) {
    this.class_registration = value;
  }

  /**
   * Gets the value of the 'Group' field.
   */
  public java.lang.Integer getGroup() {
    return Group;
  }

  /**
   * Sets the value of the 'Group' field.
   * @param value the value to set.
   */
  public void setGroup(java.lang.Integer value) {
    this.Group = value;
  }

  /**
   * Gets the value of the 'score' field.
   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * Sets the value of the 'score' field.
   * @param value the value to set.
   */
  public void setScore(java.lang.Float value) {
    this.score = value;
  }

  /** Creates a new NameGroupStudent RecordBuilder */
  public static model.NameGroupStudent.Builder newBuilder() {
    return new model.NameGroupStudent.Builder();
  }
  
  /** Creates a new NameGroupStudent RecordBuilder by copying an existing Builder */
  public static model.NameGroupStudent.Builder newBuilder(model.NameGroupStudent.Builder other) {
    return new model.NameGroupStudent.Builder(other);
  }
  
  /** Creates a new NameGroupStudent RecordBuilder by copying an existing NameGroupStudent instance */
  public static model.NameGroupStudent.Builder newBuilder(model.NameGroupStudent other) {
    return new model.NameGroupStudent.Builder(other);
  }
  
  /**
   * RecordBuilder for NameGroupStudent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NameGroupStudent>
    implements org.apache.avro.data.RecordBuilder<NameGroupStudent> {

    private int class_registration;
    private int Group;
    private float score;

    /** Creates a new Builder */
    private Builder() {
      super(model.NameGroupStudent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(model.NameGroupStudent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.class_registration)) {
        this.class_registration = data().deepCopy(fields()[0].schema(), other.class_registration);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Group)) {
        this.Group = data().deepCopy(fields()[1].schema(), other.Group);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.score)) {
        this.score = data().deepCopy(fields()[2].schema(), other.score);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing NameGroupStudent instance */
    private Builder(model.NameGroupStudent other) {
            super(model.NameGroupStudent.SCHEMA$);
      if (isValidValue(fields()[0], other.class_registration)) {
        this.class_registration = data().deepCopy(fields()[0].schema(), other.class_registration);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Group)) {
        this.Group = data().deepCopy(fields()[1].schema(), other.Group);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.score)) {
        this.score = data().deepCopy(fields()[2].schema(), other.score);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'class_registration' field */
    public java.lang.Integer getClassRegistration() {
      return class_registration;
    }
    
    /** Sets the value of the 'class_registration' field */
    public model.NameGroupStudent.Builder setClassRegistration(int value) {
      validate(fields()[0], value);
      this.class_registration = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'class_registration' field has been set */
    public boolean hasClassRegistration() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'class_registration' field */
    public model.NameGroupStudent.Builder clearClassRegistration() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'Group' field */
    public java.lang.Integer getGroup() {
      return Group;
    }
    
    /** Sets the value of the 'Group' field */
    public model.NameGroupStudent.Builder setGroup(int value) {
      validate(fields()[1], value);
      this.Group = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'Group' field has been set */
    public boolean hasGroup() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'Group' field */
    public model.NameGroupStudent.Builder clearGroup() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'score' field */
    public java.lang.Float getScore() {
      return score;
    }
    
    /** Sets the value of the 'score' field */
    public model.NameGroupStudent.Builder setScore(float value) {
      validate(fields()[2], value);
      this.score = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'score' field has been set */
    public boolean hasScore() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'score' field */
    public model.NameGroupStudent.Builder clearScore() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public NameGroupStudent build() {
      try {
        NameGroupStudent record = new NameGroupStudent();
        record.class_registration = fieldSetFlags()[0] ? this.class_registration : (java.lang.Integer) defaultValue(fields()[0]);
        record.Group = fieldSetFlags()[1] ? this.Group : (java.lang.Integer) defaultValue(fields()[1]);
        record.score = fieldSetFlags()[2] ? this.score : (java.lang.Float) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
